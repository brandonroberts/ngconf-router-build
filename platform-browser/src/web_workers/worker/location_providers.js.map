{"version":3,"file":"location_providers.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/web_workers/worker/location_providers.ts"],"names":[],"mappings":";AAAA,qBAAsC,eAAe,CAAC,CAAA;AACtD,uBAA+B,iBAAiB,CAAC,CAAA;AACjD,kCAAwC,qBAAqB,CAAC,CAAA;AAE9D;;;GAGG;AACU,qCAA6B,GAAG;IAC3C,EAAC,OAAO,EAAE,yBAAgB,EAAE,QAAQ,EAAE,6CAAyB,EAAC;IAChE,EAAC,OAAO,EAAE,sBAAe,EAAE,UAAU,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,yBAAgB,EAAE,aAAM,CAAC,EAAC;CACxG,CAAC;AAEF,0BAA0B,gBAA2C,EAAE,IAAY;IACjF,MAAM,CAAC;QACL,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,cAAM,OAAA,gBAAgB,CAAC,IAAI,EAAE,EAAvB,CAAuB,CAAC,CAAC;IACxD,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import {NgZone, APP_INITIALIZER} from '@angular/core';\nimport {PlatformLocation} from '@angular/common';\nimport {WebWorkerPlatformLocation} from './platform_location';\n\n/**\n * Those providers should be added when the router is used in a worker context in addition to the\n * {@link ROUTER_PROVIDERS} and after them.\n */\nexport const WORKER_APP_LOCATION_PROVIDERS = [\n  {provide: PlatformLocation, useClass: WebWorkerPlatformLocation},\n  {provide: APP_INITIALIZER, useFactory: appInitFnFactory, multi: true, deps: [PlatformLocation, NgZone]}\n];\n\nfunction appInitFnFactory(platformLocation: WebWorkerPlatformLocation, zone: NgZone): () => Promise<boolean> {\n  return () => {\n    return zone.runGuarded(() => platformLocation.init());\n  };\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}