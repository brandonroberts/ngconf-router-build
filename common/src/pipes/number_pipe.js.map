{"version":3,"file":"number_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/pipes/number_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import {PipeTransform, Pipe} from '@angular/core';\n\nimport {\n  isNumber,\n  isPresent,\n  isBlank,\n  NumberWrapper,\n  RegExpWrapper,\n  Type\n} from '../facade/lang';\nimport {BaseException} from '../facade/exceptions';\nimport {NumberFormatter, NumberFormatStyle} from '../facade/intl';\n\nimport {InvalidPipeArgumentException} from './invalid_pipe_argument_exception';\n\nvar defaultLocale: string = 'en-US';\nvar _re = RegExpWrapper.create('^(\\\\d+)?\\\\.((\\\\d+)(\\\\-(\\\\d+))?)?$');\n\n/**\n * Internal function to format numbers used by Decimal, Percent and Date pipes.\n */\nfunction formatNumber(pipe: Type, value: number, style: NumberFormatStyle, digits: string, currency: string = null,\n                 currencyAsSymbol: boolean = false): string {\n  if (isBlank(value)) return null;\n  if (!isNumber(value)) {\n    throw new InvalidPipeArgumentException(pipe, value);\n  }\n  var minInt = 1, minFraction = 0, maxFraction = 3;\n  if (isPresent(digits)) {\n    var parts = RegExpWrapper.firstMatch(_re, digits);\n    if (isBlank(parts)) {\n      throw new BaseException(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (isPresent(parts[1])) {  // min integer digits\n      minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\n    }\n    if (isPresent(parts[3])) {  // min fraction digits\n      minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\n    }\n    if (isPresent(parts[5])) {  // max fraction digits\n      maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\n    }\n  }\n  return NumberFormatter.format(value, defaultLocale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol\n  });\n}\nexport class DecimalPipe implements PipeTransform {\n  transform(value: any, digits: string = null): string {\n    return formatNumber(DecimalPipe, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n}\nexport class PercentPipe implements PipeTransform {\n  transform(value: any, digits: string = null): string {\n    return formatNumber(PercentPipe, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n}\nexport class CurrencyPipe implements PipeTransform {\n  transform(value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n            digits: string = null): string {\n    return formatNumber(CurrencyPipe, value, NumberFormatStyle.Currency, digits, currencyCode,\n                              symbolDisplay);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}