{"version":3,"file":"slice_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/pipes/slice_pipe.ts"],"names":[],"mappings":";AAAA,qBAAkC,eAAe,CAAC,CAAA;AAClD,qBAAwD,gBAAgB,CAAC,CAAA;AACzE,2BAA0B,sBAAsB,CAAC,CAAA;AAEjD,gDAA2C,mCAAmC,CAAC,CAAA;AAC/E;IAAA;IAgBA,CAAC;IAfC,6BAAS,GAAT,UAAU,KAAU,EAAE,KAAa,EAAE,GAAkB;QAAlB,mBAAkB,GAAlB,UAAkB;QACrD,EAAE,CAAC,CAAC,cAAO,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,IAAI,8DAA4B,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;QACD,EAAE,CAAC,CAAC,eAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,oBAAa,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,CAAC,wBAAW,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IAC9C,CAAC;IAEO,4BAAQ,GAAhB,UAAiB,GAAQ,IAAa,MAAM,CAAC,eAAQ,CAAC,GAAG,CAAC,IAAI,cAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxE,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,WAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAC,EAAG,EAAE;KACrD,CAAC;IACF,gBAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,iBAAS,YAgBrB,CAAA","sourcesContent":["import {PipeTransform, Pipe} from '@angular/core';\nimport {isBlank, isString, isArray, StringWrapper} from '../facade/lang';\nimport {ListWrapper} from '../facade/collection';\n\nimport {InvalidPipeArgumentException} from './invalid_pipe_argument_exception';\nexport class SlicePipe implements PipeTransform {\n  transform(value: any, start: number, end: number = null): any {\n    if (isBlank(value)) return value;\n    if (!this.supports(value)) {\n      throw new InvalidPipeArgumentException(SlicePipe, value);\n    }\n    if (isString(value)) {\n      return StringWrapper.slice(value, start, end);\n    }\n    return ListWrapper.slice(value, start, end);\n  }\n\n  private supports(obj: any): boolean { return isString(obj) || isArray(obj); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'slice', pure: false}, ] },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}